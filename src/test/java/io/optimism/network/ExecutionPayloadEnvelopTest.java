package io.optimism.network;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.math.BigInteger;
import org.apache.tuweni.bytes.Bytes;
import org.junit.jupiter.api.Test;

/**
 * The type ExecutionPayloadEnvelopTest.
 *
 * @author grapebaba
 * @since 0.2.6
 */
class ExecutionPayloadEnvelopTest {

    @Test
    void testValidExecutionPayloadEnvelop() {
        String data =
                "00000000000000000000000000000000000000000000000000000000000001230000000000000000000000000000000000000000000000000000000000000123000000000000000000000000000000000000045600000000000000000000000000000000000000000000000000000000000007890000000000000000000000000000000000000000000000000000000000000abc0d0e0fde000000000000004d01000000000000bc010000000000002b0200000000000010020000090300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008881202000018020000000000000000000000000000000000006666040000009999";
        ExecutionPayloadEnvelop executionPayloadEnvelop = ExecutionPayloadEnvelop.from(Bytes.fromHexString(data));

        assertEquals(
                "0x0000000000000000000000000000000000000000000000000000000000000123",
                executionPayloadEnvelop.parentBeaconBlockRoot().toHexString());

        assertEquals(BigInteger.ZERO, executionPayloadEnvelop.executionPayload().blobGasUsed());
        assertEquals(BigInteger.ZERO, executionPayloadEnvelop.executionPayload().excessBlobGas());
        assertEquals(
                BigInteger.valueOf(222L),
                executionPayloadEnvelop.executionPayload().blockNumber());
        assertEquals(
                BigInteger.valueOf(555L),
                executionPayloadEnvelop.executionPayload().timestamp());
        assertEquals(
                "0x0000000000000000000000000000000000000000000000000000000000000123",
                executionPayloadEnvelop.executionPayload().parentHash());
        assertEquals(
                "0x0000000000000000000000000000000000000000000000000000000000000789",
                executionPayloadEnvelop.executionPayload().stateRoot());
        assertEquals("0x6666", executionPayloadEnvelop.executionPayload().extraData());
    }
}
