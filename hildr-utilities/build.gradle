plugins {
	id 'java-library'
//    id 'checkstyle'
	id "jacoco"
	id "com.diffplug.spotless" version "6.22.0"
	id "net.ltgt.errorprone" version "3.1.0"
}

group = 'io.optimism'
version = '0.2.5'

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
	maven {
		url "https://artifacts.consensys.net/public/teku/maven/"
	}
	maven {
		url "https://dl.cloudsmith.io/public/libp2p/jvm-libp2p/maven/"
	}
	maven {
		url "https://hyperledger.jfrog.io/artifactory/besu-maven/"
	}
	maven {
		url "https://artifacts.consensys.net/public/maven/maven/"
	}
	maven { url "https://artifacts.consensys.net/public/maven/maven/" }
	maven { url "https://jitpack.io" }
	google()
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += "--enable-preview"
	options.compilerArgs += "-Xlint:preview"
//    options.compilerArgs += ["--add-modules", "jdk.incubator.concurrent"]
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.withType(Test).configureEach {
	jvmArgs += "--enable-preview"
//    jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

tasks.withType(JavaExec).configureEach {
	jvmArgs += "--enable-preview"
//    jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

dependencies {
	api 'com.google.guava:guava:31.1-jre'
	api 'com.github.rholder:guava-retrying:2.0.0'
	api 'org.apache.commons:commons-lang3:3.12.0'

	api("com.squareup.okhttp3:okhttp:5.0.0-alpha.2")
	api("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2")
	api('org.web3j:core:4.11.0') {
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		exclude group: 'com.squareup.okhttp3', module: 'okhttp'
		exclude group: 'com.squareup.okhttp3', module: 'logging-interceptor'
	}

	api files('libs/core-4.11.1-SNAPSHOT.jar')
	api 'io.micrometer:micrometer-registry-prometheus:1.11.0'
	api platform('io.micrometer:micrometer-tracing-bom:1.1.1')
	api 'io.micrometer:micrometer-tracing'
	api 'io.micrometer:micrometer-tracing-bridge-otel'

	api platform("io.opentelemetry:opentelemetry-bom-alpha:1.26.0-alpha")
	api platform("io.opentelemetry:opentelemetry-bom:1.26.0")
	api 'io.opentelemetry:opentelemetry-api'
	api 'io.opentelemetry:opentelemetry-sdk'
	api 'io.opentelemetry:opentelemetry-sdk-logs'

	implementation 'com.fasterxml.jackson:jackson-bom:2.15.2'
	implementation 'com.fasterxml.jackson.core:jackson-core'

	implementation 'ch.qos.logback:logback-core:1.4.7'
	implementation 'ch.qos.logback:logback-classic:1.4.7'

	implementation 'com.google.protobuf:protobuf-java:3.25.1'
	implementation 'io.tmio:tuweni-units:2.4.2'
	implementation 'io.tmio:tuweni-rlp:2.4.2'
	implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
	implementation 'org.slf4j:slf4j-api:2.0.7'
	implementation 'io.libp2p:jvm-libp2p:1.0.1-RELEASE'
	implementation('org.hyperledger.besu.internal:core:23.10.2')
	implementation('org.hyperledger.besu.internal:algorithms:23.10.2')
	implementation('org.hyperledger.besu.internal:rlp:23.10.2')
	implementation('org.hyperledger.besu:besu-datatypes:23.10.2')
	implementation('org.hyperledger.besu:plugin-api:23.10.2')

	testImplementation platform('org.junit:junit-bom:5.9.1')
	testImplementation 'org.junit.jupiter:junit-jupiter'
	testImplementation('io.tmio:tuweni-crypto:2.4.2') {
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
	}

	errorprone("com.google.errorprone:error_prone_core:2.18.0")
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

//checkstyle {
//    toolVersion = '10.10.0'
//    configFile = project(":").file("config/checkstyle/google_checks.xml")
//}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test

	reports {
		csv.required = true
	}
}

jacocoTestCoverageVerification {

	violationRules {
		rule {
			limit {
				minimum = 0.3
			}
		}
	}
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}

check {
	dependsOn += jacocoTestCoverageVerification
//	dependsOn += integrationTest
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
				"-Djunit.platform.reporting.open.xml.enabled=true",
				"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}",
				"--enable-preview"
		]
	} as CommandLineArgumentProvider)
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration

		// don't need to set target, it is inferred from java

		palantirJavaFormat('2.38.0')
		// fix formatting of type annotations
		formatAnnotations()

		importOrder()

		removeUnusedImports()
	}


}

javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	options.addBooleanOption('-enable-preview', true)
	options.addStringOption('-release', '21')
//	options.addStringOption('-add-modules', 'jdk.incubator.concurrent')
}

java {
	withJavadocJar()
	withSourcesJar()
}
