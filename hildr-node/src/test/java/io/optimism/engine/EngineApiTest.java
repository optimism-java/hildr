package io.optimism.engine;

import static org.junit.jupiter.api.Assertions.assertEquals;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import io.optimism.TestConstants;
import io.optimism.common.Epoch;
import io.optimism.engine.ExecutionPayload.ExecutionPayloadRes;
import io.optimism.engine.ExecutionPayload.PayloadAttributes;
import io.optimism.engine.ExecutionPayload.PayloadStatus;
import io.optimism.engine.ExecutionPayload.Status;
import io.optimism.engine.ForkChoiceUpdate.ForkChoiceUpdateRes;
import io.optimism.engine.ForkChoiceUpdate.ForkchoiceState;
import java.io.IOException;
import java.math.BigInteger;
import java.security.Key;
import java.util.List;
import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.web3j.crypto.Hash;
import org.web3j.utils.Numeric;

/**
 * The type EngineApiTest.
 *
 * @author zhouxing
 * @since 0.1.0
 */
public class EngineApiTest {

    public static final String AUTH_ADDR = "127.0.0.1";
    public static final String SECRET = "f79ae8046bc11c9927afe911db7143c51a806c4a537cc08e0d37140b0192f430";

    public static MockWebServer server;

    @BeforeAll
    static void setUp() throws IOException {
        server = new MockWebServer();
        server.start(8851);
    }

    @AfterAll
    static void tearDown() throws IOException {
        server.shutdown();
    }

    String initForkChoiceUpdateResp() throws JsonProcessingException {
        PayloadStatus payloadStatus = new PayloadStatus();
        payloadStatus.setStatus(Status.ACCEPTED);
        payloadStatus.setLatestValidHash("asdfadfsdfadsfasdf");
        payloadStatus.setValidationError("");
        ForkChoiceUpdateRes forkChoiceUpdateRes = new ForkChoiceUpdateRes(payloadStatus, "1");
        OpEthForkChoiceUpdate opEthForkChoiceUpdate = new OpEthForkChoiceUpdate();
        opEthForkChoiceUpdate.setResult(forkChoiceUpdateRes);
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        return ow.writeValueAsString(opEthForkChoiceUpdate);
    }

    String initPayloadStatusResp() throws JsonProcessingException {
        PayloadStatus payloadStatus = new PayloadStatus();
        payloadStatus.setStatus(Status.ACCEPTED);
        payloadStatus.setLatestValidHash("12312321");
        OpEthPayloadStatus opEthPayloadStatus = new OpEthPayloadStatus();
        opEthPayloadStatus.setResult(payloadStatus);
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        return ow.writeValueAsString(opEthPayloadStatus);
    }

    ExecutionPayloadRes initExecutionPayload() {
        return new ExecutionPayloadRes(
                "sdvkem39441fd132131",
                "123123",
                "123123",
                "123123",
                "123123",
                "123123",
                "1234",
                "123123",
                "123123",
                "123123",
                "123123",
                "123123",
                "sdfasdf12312312",
                null,
                List.of(""),
                "123321",
                "321123");
    }

    String initExecutionPayloadJson() throws JsonProcessingException {
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        OpEthExecutionPayload opEthExecutionPayload = new OpEthExecutionPayload();
        opEthExecutionPayload.setResult(new OpEthExecutionPayload.ExecutionPayloadObj(initExecutionPayload()));
        return ow.writeValueAsString(opEthExecutionPayload);
    }

    @Test
    void testForkChoiceUpdate() throws IOException {
        String baseUrl = EngineApi.authUrlFromAddr(AUTH_ADDR, null);
        assertEquals("http://127.0.0.1:8851", baseUrl);
        server.enqueue(new MockResponse().setBody(initForkChoiceUpdateResp()));
        EngineApi engineApi = new EngineApi(TestConstants.createConfig(), baseUrl, SECRET);
        ForkchoiceState forkchoiceState = new ForkchoiceState("123", "123", "!@3");
        PayloadAttributes payloadAttributes = new PayloadAttributes(
                new BigInteger("123123"),
                "123123",
                "123",
                List.of(""),
                null,
                true,
                new BigInteger("1"),
                new Epoch(new BigInteger("12"), "123", new BigInteger("1233145"), BigInteger.ZERO),
                new BigInteger("1334"),
                new BigInteger("321"),
                null);

        OpEthForkChoiceUpdate forkChoiceUpdate = engineApi.forkchoiceUpdated(forkchoiceState, payloadAttributes);
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        assertEquals(initForkChoiceUpdateResp(), ow.writeValueAsString(forkChoiceUpdate));
    }

    @Test
    void testNewPayload() throws IOException {
        String baseUrl = EngineApi.authUrlFromAddr(AUTH_ADDR, null);
        assertEquals("http://127.0.0.1:8851", baseUrl);
        server.enqueue(new MockResponse().setBody(initPayloadStatusResp()));
        EngineApi engineApi = new EngineApi(TestConstants.createConfig(), baseUrl, SECRET);
        OpEthPayloadStatus payloadStatus =
                engineApi.newPayload(initExecutionPayload().toExecutionPayload(null));
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        assertEquals(initPayloadStatusResp(), ow.writeValueAsString(payloadStatus));
    }

    @Test
    void testGetPayload() throws IOException {
        String baseUrl = EngineApi.authUrlFromAddr(AUTH_ADDR, null);
        assertEquals("http://127.0.0.1:8851", baseUrl);
        server.enqueue(new MockResponse().setBody(initExecutionPayloadJson()));
        EngineApi engineApi = new EngineApi(TestConstants.createConfig(), baseUrl, SECRET);
        OpEthExecutionPayload executionPayload = engineApi.getPayload(null, new BigInteger("123"));
        ObjectWriter ow = new ObjectMapper().writer().withDefaultPrettyPrinter();
        assertEquals(initExecutionPayloadJson(), ow.writeValueAsString(executionPayload));
    }

    @Test
    @DisplayName("test jwt token")
    void testJwts() {
        Key key = Keys.hmacShaKeyFor(
                Numeric.hexStringToByteArray("f79ae5046bc11c9927afe911db7143c51a806c4a537cc08e0d37140b0192f430"));
        String jws = EngineApi.generateJws(key);

        Jws<Claims> jwt = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(jws);
        System.out.println(jwt);
        assertEquals(jwt.getHeader().getAlgorithm(), "HS256");

        assertEquals(
                jwt.getBody().getExpiration().toInstant().getEpochSecond()
                        - jwt.getBody().getIssuedAt().toInstant().getEpochSecond(),
                60L);
    }

    @Test
    void testHash() {
        String tx_hash1 = Hash.sha3(
                "0x7ef90159a04b1c8fe680cd35793c1f23df1eef6fc6b1a14dc76bec2cc8d38c3bb7326770d494deaddeaddeaddeaddeaddeaddeaddeaddead00019442000000000000000000000000000000000000158080830f424080b90104015d8eb900000000000000000000000000000000000000000000000000000000005169650000000000000000000000000000000000000000000000000000000065d62bbc0000000000000000000000000000000000000000000000000000000234deaa21e680e3ec5290b08570531865205fe15ddc5dbac1f55b4156e2444e77f36d97f400000000000000000000000000000000000000000000000000000000000000040000000000000000000000008f23bb38f531600e5d8fddaaec41f13fab46e98c00000000000000000000000000000000000000000000000000000000000000bc00000000000000000000000000000000000000000000000000000000000a6fe0");
        String tx_hash2 = Hash.sha3(
                "0x7ef9059fa0877a6077205782ea15a6dc8699fa5ebcec5e0f4389f09cb8eda09488231346f89442100000000000000000000000000000000000008080808305b8d880b9055e608060405234801561001057600080fd5b5061053e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80638381f58a11610097578063c598591811610066578063c598591814610229578063e591b28214610249578063e81b2c6d14610289578063f82061401461029257600080fd5b80638381f58a146101e35780638b239f73146101f75780639e8c496614610200578063b80777ea1461020957600080fd5b806354fd4d50116100d357806354fd4d50146101335780635cf249691461017c57806364ca23ef1461018557806368d5dca6146101b257600080fd5b8063015d8eb9146100fa57806309bd5a601461010f578063440a5e201461012b575b600080fd5b61010d61010836600461044c565b61029b565b005b61011860025481565b6040519081526020015b60405180910390f35b61010d6103da565b61016f6040518060400160405280600581526020017f312e322e3000000000000000000000000000000000000000000000000000000081525081565b60405161012291906104be565b61011860015481565b6003546101999067ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610122565b6003546101ce9068010000000000000000900463ffffffff1681565b60405163ffffffff9091168152602001610122565b6000546101999067ffffffffffffffff1681565b61011860055481565b61011860065481565b6000546101999068010000000000000000900467ffffffffffffffff1681565b6003546101ce906c01000000000000000000000000900463ffffffff1681565b61026473deaddeaddeaddeaddeaddeaddeaddeaddead000181565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610122565b61011860045481565b61011860075481565b3373deaddeaddeaddeaddeaddeaddeaddeaddead000114610342576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603b60248201527f4c31426c6f636b3a206f6e6c7920746865206465706f7369746f72206163636f60448201527f756e742063616e20736574204c3120626c6f636b2076616c7565730000000000606482015260840160405180910390fd5b6000805467ffffffffffffffff98891668010000000000000000027fffffffffffffffffffffffffffffffff00000000000000000000000000000000909116998916999099179890981790975560019490945560029290925560038054919094167fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009190911617909255600491909155600555600655565b3373deaddeaddeaddeaddeaddeaddeaddeaddead00011461040357633cc50b456000526004601cfd5b60043560801c60035560143560801c600055602435600155604435600755606435600255608435600455565b803567ffffffffffffffff8116811461044757600080fd5b919050565b600080600080600080600080610100898b03121561046957600080fd5b6104728961042f565b975061048060208a0161042f565b9650604089013595506060890135945061049c60808a0161042f565b979a969950949793969560a0850135955060c08501359460e001359350915050565b600060208083528351808285015260005b818110156104eb578581018301518582016040015282016104cf565b818111156104fd576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201604001939250505056fea164736f6c634300080f000a");
        String tx_hash3 = Hash.sha3(
                "0x7ef91016a0a312b4510adf943510f05fcc8f15f86995a5066bd83ce11384688ae20e6ecf42944210000000000000000000000000000000000001808080830f424080b90fd5608060405234801561001057600080fd5b50610fb5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806354fd4d5011610097578063de26c4a111610066578063de26c4a1146101da578063f45e65d8146101ed578063f8206140146101f5578063fe173b97146101cc57600080fd5b806354fd4d501461016657806368d5dca6146101af5780636ef25c3a146101cc578063c5985918146101d257600080fd5b8063313ce567116100d3578063313ce5671461012757806349948e0e1461012e5780634ef6e22414610141578063519b4bd31461015e57600080fd5b80630c18c162146100fa57806322b90ab3146101155780632e0f26251461011f575b600080fd5b6101026101fd565b6040519081526020015b60405180910390f35b61011d61031e565b005b610102600681565b6006610102565b61010261013c366004610b73565b610541565b60005461014e9060ff1681565b604051901515815260200161010c565b610102610565565b6101a26040518060400160405280600581526020017f312e322e3000000000000000000000000000000000000000000000000000000081525081565b60405161010c9190610c42565b6101b76105c6565b60405163ffffffff909116815260200161010c565b48610102565b6101b761064b565b6101026101e8366004610b73565b6106ac565b610102610760565b610102610853565b6000805460ff1615610296576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f47617350726963654f7261636c653a206f76657268656164282920697320646560448201527f707265636174656400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610cb5565b905090565b73420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff1663e591b2826040518163ffffffff1660e01b8152600401602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190610cce565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610481576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604160248201527f47617350726963654f7261636c653a206f6e6c7920746865206465706f73697460448201527f6f72206163636f756e742063616e2073657420697345636f746f6e6520666c6160648201527f6700000000000000000000000000000000000000000000000000000000000000608482015260a40161028d565b60005460ff1615610514576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47617350726963654f7261636c653a2045636f746f6e6520616c72656164792060448201527f6163746976650000000000000000000000000000000000000000000000000000606482015260840161028d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b6000805460ff161561055c57610556826108b4565b92915050565b61055682610958565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16635cf249696040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f5573d6000803e3d6000fd5b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff166368d5dca66040518163ffffffff1660e01b8152600401602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103199190610d04565b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff1663c59859186040518163ffffffff1660e01b8152600401602060405180830381865afa158015610627573d6000803e3d6000fd5b6000806106b883610ab4565b60005490915060ff16156106cc5792915050565b73420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074f9190610cb5565b6107599082610d59565b9392505050565b6000805460ff16156107f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f47617350726963654f7261636c653a207363616c61722829206973206465707260448201527f6563617465640000000000000000000000000000000000000000000000000000606482015260840161028d565b73420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f5573d6000803e3d6000fd5b600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff1663f82061406040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f5573d6000803e3d6000fd5b6000806108c083610ab4565b905060006108cc610565565b6108d461064b565b6108df906010610d71565b63ffffffff166108ef9190610d9d565b905060006108fb610853565b6109036105c6565b63ffffffff166109139190610d9d565b905060006109218284610d59565b61092b9085610d9d565b90506109396006600a610efa565b610944906010610d9d565b61094e9082610f06565b9695505050505050565b60008061096483610ab4565b9050600073420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16639e8c49666040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109eb9190610cb5565b6109f3610565565b73420000000000000000000000000000000000001573ffffffffffffffffffffffffffffffffffffffff16638b239f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a769190610cb5565b610a809085610d59565b610a8a9190610d9d565b610a949190610d9d565b9050610aa26006600a610efa565b610aac9082610f06565b949350505050565b80516000908190815b81811015610b3757848181518110610ad757610ad7610f41565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016600003610b1757610b10600484610d59565b9250610b25565b610b22601084610d59565b92505b80610b2f81610f70565b915050610abd565b50610aac82610440610d59565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215610b8557600080fd5b813567ffffffffffffffff80821115610b9d57600080fd5b818401915084601f830112610bb157600080fd5b813581811115610bc357610bc3610b44565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715610c0957610c09610b44565b81604052828152876020848701011115610c2257600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b81811015610c6f57858101830151858201604001528201610c53565b81811115610c81576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b600060208284031215610cc757600080fd5b5051919050565b600060208284031215610ce057600080fd5b815173ffffffffffffffffffffffffffffffffffffffff8116811461075957600080fd5b600060208284031215610d1657600080fd5b815163ffffffff8116811461075957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115610d6c57610d6c610d2a565b500190565b600063ffffffff80831681851681830481118215151615610d9457610d94610d2a565b02949350505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610dd557610dd5610d2a565b500290565b600181815b80851115610e3357817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610e1957610e19610d2a565b80851615610e2657918102915b93841c9390800290610ddf565b509250929050565b600082610e4a57506001610556565b81610e5757506000610556565b8160018114610e6d5760028114610e7757610e93565b6001915050610556565b60ff841115610e8857610e88610d2a565b50506001821b610556565b5060208310610133831016604e8410600b8410161715610eb6575081810a610556565b610ec08383610dda565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115610ef257610ef2610d2a565b029392505050565b60006107598383610e3b565b600082610f3c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610fa157610fa1610d2a565b506001019056fea164736f6c634300080f000a");
        String tx_hash4 = Hash.sha3(
                "0x7ef876a018acb38c5ff1c238a7460ebc1b421fa49ec4874bdf1e0a530d234104e5e67dbc940000000000000000000000000000000000000000944200000000000000000000000000000000000015808082c35080a43659cfe600000000000000000000000007dbe8500fc591d1852b76fee44d5a05e13097ff");
        String tx_hash5 = Hash.sha3(
                "0x7ef876a0ee4f9385eceef498af0be7ec5862229f426dec41c8d42397c7257a5117d9230a94000000000000000000000000000000000000000094420000000000000000000000000000000000000f808082c35080a43659cfe6000000000000000000000000b528d11cc114e026f138fe568744c6d45ce6da7a");
        String tx_hash6 = Hash.sha3(
                "0x7ef857a00c1cb38e99dbc9cbfab3bb80863380b0905290b37eb3d6ab18dc01c1f3e75f9394deaddeaddeaddeaddeaddeaddeaddeaddead000194420000000000000000000000000000000000000f808083013880808422b90ab3");
        String tx_hash7 = Hash.sha3(
                "0x7ef8aaa069b763c48478b9dc2f65ada09b3d92133ec592ea715ec65ad6e7f3dc519dc00c940b799c86a49deeb90402691f1041aa3af2d3c8758080808303d09080b86a60618060095f395ff33373fffffffffffffffffffffffffffffffffffffffe14604d57602036146024575f5ffd5b5f35801560495762001fff810690815414603c575f5ffd5b62001fff01545f5260205ff35b5f5ffd5b62001fff42064281555f359062001fff015500");
        System.out.println(tx_hash1);
        System.out.println(tx_hash2);
        System.out.println(tx_hash3);
        System.out.println(tx_hash4);
        System.out.println(tx_hash5);
        System.out.println(tx_hash6);
        System.out.println(tx_hash7);
    }
}
