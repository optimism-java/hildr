/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
	id 'java'
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
	id "checkstyle"
	id "jacoco"
	id "com.diffplug.spotless" version "6.18.0"
	id "net.ltgt.errorprone" version "3.1.0"
//    id 'org.unbroken-dome.test-sets' version '4.0.0'
//    id 'maven-publish'
//    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
//    id 'signing'
}

group 'me.grapebaba'
version '0.1.0-snapshot'

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

compileJava {
	options.compilerArgs << '--enable-preview'
	options.compilerArgs << '-Xlint:preview'
}

compileTestJava {
	options.compilerArgs << '--enable-preview'
	options.compilerArgs << '-Xlint:preview'
}

dependencies {
	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-engine
	testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.9.1'

	testRuntimeOnly 'org.junit.platform:junit-platform-reporting:1.9.1'
	// This dependency is used by the application.
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.github.rholder:guava-retrying:2.0.0'

	implementation 'org.web3j:core:4.9.8'
	implementation('net.osslabz.evm:evm-abi-decoder:0.0.6')
	implementation 'com.github.gestalt-config:gestalt-core:0.20.4'
	implementation 'com.github.gestalt-config:gestalt-toml:0.20.4'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml:2.14.2'
	implementation 'org.jctools:jctools-core:4.0.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'

	errorprone("com.google.errorprone:error_prone_core:2.18.0")

	testImplementation 'org.mockito:mockito-junit-jupiter:2.19.0'
	testImplementation("com.squareup.okhttp3:mockwebserver:4.9.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

application {
	// Define the main class for the application.
	mainClass = 'io.optimism.App'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test

	reports {
		csv.required = true
	}
}

jacocoTestCoverageVerification {

	violationRules {
		rule {
			limit {
				minimum = 0
			}
		}
	}
}

checkstyle {
	toolVersion = '10.10.0'
	// default checkstyle config -- specific to your team agreement
	configFile = project(":").file("config/checkstyle/google_checks.xml")
	// Google style (idiosyncratic to Google):
	// configFile = project(":").file("config/checkstyle/google_checks.xml")
	// SUN style (closest to modern Java styles) -- the basis for this project:
	// configFile = project(":").file("config/checkstyle/sun_checks.xml")
//	ignoreFailures = false
//	maxWarnings = 0
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration

		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0')
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeaderFile project(":").file("config/spotless/java.license")
		importOrder()

		removeUnusedImports()
	}
}

//testSets {
//    integrationTest
//}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}

check {
	dependsOn += jacocoTestCoverageVerification
//	dependsOn += integrationTest
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
				"-Djunit.platform.reporting.open.xml.enabled=true",
				"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}",
				"--enable-preview"
		]
	} as CommandLineArgumentProvider)
}

java {
	withJavadocJar()
	withSourcesJar()
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	options.addBooleanOption('-enable-preview', true)
	options.addStringOption('-release', '20')
}
