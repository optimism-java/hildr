/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1.1/userguide/building_java_projects.html
 */

plugins {
	id 'java'
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
	id "checkstyle"
	id "jacoco"
	id "com.diffplug.spotless" version "6.19.0"
	id "net.ltgt.errorprone" version "3.1.0"
	id 'org.graalvm.buildtools.native' version '0.9.22'
//    id 'org.unbroken-dome.test-sets' version '4.0.0'
//    id 'maven-publish'
//    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
//    id 'signing'
}

group 'me.grapebaba'
version '0.1.0'

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}


tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += "--enable-preview"
	options.compilerArgs += "-Xlint:preview"
	options.compilerArgs += ["--add-modules", "jdk.incubator.concurrent"]
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.withType(Test).configureEach {
	jvmArgs += "--enable-preview"
	jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

tasks.withType(JavaExec).configureEach {
	jvmArgs += "--enable-preview"
	jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

dependencies {
	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-engine
	testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.9.1'

	testRuntimeOnly 'org.junit.platform:junit-platform-reporting:1.9.1'
	// This dependency is used by the application.
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.github.rholder:guava-retrying:2.0.0'

	// define any required OkHttp artifacts without version
	implementation("com.squareup.okhttp3:okhttp:5.0.0-alpha.2")
	implementation("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2")

	implementation('org.web3j:core:4.9.8') {
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		exclude group: 'com.squareup.okhttp3', module: 'okhttp'
		exclude group: 'com.squareup.okhttp3', module: 'logging-interceptor'
	}
	implementation('net.osslabz.evm:evm-abi-decoder:0.0.6')
	implementation 'com.github.gestalt-config:gestalt-core:0.20.4'
	implementation 'com.github.gestalt-config:gestalt-toml:0.20.4'

	implementation 'com.fasterxml.jackson:jackson-bom:2.15.2'
	implementation 'com.fasterxml.jackson.core:jackson-core'
//	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml'
	implementation 'org.jctools:jctools-core:4.0.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//jsonrpc
	implementation('io.vertx:vertx-auth-jwt:4.4.2')
	implementation('io.vertx:vertx-core:4.4.2')
	implementation('io.vertx:vertx-web:4.4.2')

	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'
	implementation platform('io.micrometer:micrometer-tracing-bom:1.1.1')
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'

	// Logback
	implementation 'ch.qos.logback:logback-core:1.4.7'
	implementation 'ch.qos.logback:logback-classic:1.4.7'
	implementation 'org.slf4j:slf4j-api:2.0.7'

	implementation platform("io.opentelemetry:opentelemetry-bom-alpha:1.26.0-alpha")
	// OpenTelemetry core
	implementation(platform("io.opentelemetry:opentelemetry-bom:1.26.0"))
	implementation 'io.opentelemetry:opentelemetry-api'
	implementation 'io.opentelemetry:opentelemetry-sdk'
	implementation 'io.opentelemetry:opentelemetry-sdk-logs'

	// OpenTelemetry log4j appenders
	implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.26.0-alpha")
	runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0'


	implementation 'info.picocli:picocli:4.7.3'
	annotationProcessor 'info.picocli:picocli-codegen:4.7.3'

	errorprone("com.google.errorprone:error_prone_core:2.18.0")

	testImplementation 'org.mockito:mockito-junit-jupiter:2.19.0'
	testImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(20)
	}
}

application {
	// Define the main class for the application.
	mainClass = 'io.optimism.Hildr'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test

	reports {
		csv.required = true
	}
}

jacocoTestCoverageVerification {

	violationRules {
		rule {
			limit {
				minimum = 0
			}
		}
	}
}

checkstyle {
	toolVersion = '10.10.0'
	// default checkstyle config -- specific to your team agreement
	configFile = project(":").file("config/checkstyle/google_checks.xml")
	// Google style (idiosyncratic to Google):
	// configFile = project(":").file("config/checkstyle/google_checks.xml")
	// SUN style (closest to modern Java styles) -- the basis for this project:
	// configFile = project(":").file("config/checkstyle/sun_checks.xml")
//	ignoreFailures = false
//	maxWarnings = 0
}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration

		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		googleJavaFormat('1.17.0')
		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section below)
		licenseHeaderFile(project(":").file("config/spotless/java.license")).named('hildr').onlyIfContentMatches('/*\n' +
				' * Copyright 2023 281165273grape@gmail.com')
		licenseHeaderFile(project(":").file("config/spotless/besu.license")).named('besu').onlyIfContentMatches('/*\n' +
				' * Copyright ConsenSys AG')

		importOrder()

		removeUnusedImports()
	}
}

checkstyleMain
		.exclude('io/optimism/rpc/handler/TimeoutHandler.java')
		.exclude('io/optimism/rpc/handler/JsonRpcExecutorHandler.java')
		.exclude('io/optimism/rpc/handler/JsonRpcParseHandler.java')
		.exclude('io/optimism/rpc/methods/JsonRpcMethod.java')
		.exclude('io/optimism/rpc/methods/JsonRpcMethodsFactory.java')
		.exclude('io/optimism/rpc/methods/JsonRpcProcessor.java')
		.exclude('io/optimism/rpc/execution/LoggedJsonRpcProcessor.java')
		.exclude('io/optimism/rpc/internal/JsonRpcRequest.java')
		.exclude('io/optimism/rpc/internal/JsonRpcRequestContext.java')
		.exclude('io/optimism/rpc/internal/JsonRpcRequestId.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcResponse.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcErrorResponse.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcError.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcResponseType.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcSuccessResponse.java')
		.exclude('io/optimism/rpc/internal/response/JsonRpcNoResponse.java')
		.exclude('io/optimism/rpc/execution/BaseJsonRpcProcessor.java')
		.exclude('io/optimism/rpc/execution/JsonRpcProcessor.java')
//testSets {
//    integrationTest
//}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}

check {
	dependsOn += jacocoTestCoverageVerification
//	dependsOn += integrationTest
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
				"-Djunit.platform.reporting.open.xml.enabled=true",
				"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}",
				"--enable-preview"
		]
	} as CommandLineArgumentProvider)
}

java {
	withJavadocJar()
	withSourcesJar()
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	options.addBooleanOption('-enable-preview', true)
	options.addStringOption('-release', '20')
	options.addStringOption('-add-modules', 'jdk.incubator.concurrent')
}

jar {
	manifest {
		attributes "Main-Class": "io.optimism.Hildr"
	}

	duplicatesStrategy = DuplicatesStrategy.WARN
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
	}
}

task copyJarToBinaryDir {
	dependsOn jar
	def buildBinaryDir = "build/binary"
	doLast {
		new File(buildBinaryDir).mkdirs()
		copy {
			from "build/libs/${project.name}-${project.version}.jar"
			into buildBinaryDir
			rename "${project.name}-${project.version}.jar", "${project.name}.jar"
		}
	}
}

task buildBinary {
	dependsOn copyJarToBinaryDir
	def buildBinaryDir = "build/binary"
	def out = new ByteArrayOutputStream()
	doLast {
		exec {
			workingDir buildBinaryDir
			executable "sh"
			args "-c", "native-image -jar ${project.name}.jar --no-fallback --enable-http --enable-https --enable-preview --add-modules jdk.incubator.concurrent -H:EnableURLProtocols=http,https  --initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback.core.CoreConstants,ch.qos.logback.core.util.Loader,ch.qos.logback.core.util.StatusPrinter,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.classic.Logger,ch.qos.logback.core.rolling.helper.FileNamePattern,ch.qos.logback.classic.Level,ch.qos.logback.core.status.StatusBase,io.opentelemetry.api.trace.ArrayBasedTraceStateBuilder,io.opentelemetry.context.LazyStorage,ch.qos.logback.core.util.FileSize,ch.qos.logback.core.rolling.helper.RollingCalendar,io.opentelemetry.api.internal.ImmutableSpanContext,io.opentelemetry.api.internal.OtelEncodingUtils,ch.qos.logback.classic.PatternLayout,io.opentelemetry.context.ThreadLocalContextStorage,io.opentelemetry.api.trace.PropagatedSpan,io.opentelemetry.context.ContextStorageWrappers,ch.qos.logback.core.rolling.helper.Compressor\$1,io.opentelemetry.api.trace.ImmutableTraceFlags,ch.qos.logback.core.rolling.helper.RollingCalendar\$1,ch.qos.logback.classic.model.ConfigurationModel,ch.qos.logback.core.model.processor.DefaultProcessor\$1,ch.qos.logback.core.model.processor.ImplicitModelHandler\$1,ch.qos.logback.core.subst.Token,ch.qos.logback.core.pattern.parser.Parser,ch.qos.logback.core.subst.Parser\$1,ch.qos.logback.core.util.Duration,ch.qos.logback.core.model.processor.ChainedModelFilter\$1,ch.qos.logback.classic.model.processor.ConfigurationModelHandler,ch.qos.logback.classic.model.processor.LogbackClassicDefaultNestedComponentRules,ch.qos.logback.core.subst.NodeToStringTransformer\$1,ch.qos.logback.core.pattern.parser.TokenStream\$1,ch.qos.logback.core.subst.Tokenizer\$1 --initialize-at-run-time=io.netty.channel.AbstractChannel,io.netty.channel.socket.nio.SelectorProviderUtil,io.netty.util.concurrent.DefaultPromise,io.netty,org.slf4j.MDC,org.github.gestalt.config ${project.name}"
			standardOutput out
		}
	}
	println(out.toString())
}

task buildBinaryStaticNoG1GC {
	dependsOn copyJarToBinaryDir
	def buildBinaryDir = "build/binary"
	def out = new ByteArrayOutputStream()
	doLast {
		exec {
			workingDir buildBinaryDir
			executable "sh"
			args "-c", "native-image -jar ${project.name}.jar --static --libc=musl --no-fallback --enable-http --enable-https --enable-preview --add-modules jdk.incubator.concurrent -H:EnableURLProtocols=http,https  --initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback.core.CoreConstants,ch.qos.logback.core.util.Loader,ch.qos.logback.core.util.StatusPrinter,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.classic.Logger,ch.qos.logback.core.rolling.helper.FileNamePattern,ch.qos.logback.classic.Level,ch.qos.logback.core.status.StatusBase,io.opentelemetry.api.trace.ArrayBasedTraceStateBuilder,io.opentelemetry.context.LazyStorage,ch.qos.logback.core.util.FileSize,ch.qos.logback.core.rolling.helper.RollingCalendar,io.opentelemetry.api.internal.ImmutableSpanContext,io.opentelemetry.api.internal.OtelEncodingUtils,ch.qos.logback.classic.PatternLayout,io.opentelemetry.context.ThreadLocalContextStorage,io.opentelemetry.api.trace.PropagatedSpan,io.opentelemetry.context.ContextStorageWrappers,ch.qos.logback.core.rolling.helper.Compressor\$1,io.opentelemetry.api.trace.ImmutableTraceFlags,ch.qos.logback.core.rolling.helper.RollingCalendar\$1,ch.qos.logback.classic.model.ConfigurationModel,ch.qos.logback.core.model.processor.DefaultProcessor\$1,ch.qos.logback.core.model.processor.ImplicitModelHandler\$1,ch.qos.logback.core.subst.Token,ch.qos.logback.core.pattern.parser.Parser,ch.qos.logback.core.subst.Parser\$1,ch.qos.logback.core.util.Duration,ch.qos.logback.core.model.processor.ChainedModelFilter\$1,ch.qos.logback.classic.model.processor.ConfigurationModelHandler,ch.qos.logback.classic.model.processor.LogbackClassicDefaultNestedComponentRules,ch.qos.logback.core.subst.NodeToStringTransformer\$1,ch.qos.logback.core.pattern.parser.TokenStream\$1,ch.qos.logback.core.subst.Tokenizer\$1 --initialize-at-run-time=io.netty.channel.AbstractChannel,io.netty.channel.socket.nio.SelectorProviderUtil,io.netty.util.concurrent.DefaultPromise,io.netty,org.slf4j.MDC,org.github.gestalt.config ${project.name}"
			standardOutput out
		}
	}
	println(out.toString())
}

task buildBinaryStatic {
	dependsOn copyJarToBinaryDir
	def buildBinaryDir = "build/binary"
	def out = new ByteArrayOutputStream()
	doLast {
		exec {
			workingDir buildBinaryDir
			executable "sh"
			args "-c", "native-image -jar ${project.name}.jar --gc=G1 --static --libc=musl --no-fallback --enable-http --enable-https --enable-preview --add-modules jdk.incubator.concurrent -H:EnableURLProtocols=http,https  --initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback.core.CoreConstants,ch.qos.logback.core.util.Loader,ch.qos.logback.core.util.StatusPrinter,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.classic.Logger,ch.qos.logback.core.rolling.helper.FileNamePattern,ch.qos.logback.classic.Level,ch.qos.logback.core.status.StatusBase,io.opentelemetry.api.trace.ArrayBasedTraceStateBuilder,io.opentelemetry.context.LazyStorage,ch.qos.logback.core.util.FileSize,ch.qos.logback.core.rolling.helper.RollingCalendar,io.opentelemetry.api.internal.ImmutableSpanContext,io.opentelemetry.api.internal.OtelEncodingUtils,ch.qos.logback.classic.PatternLayout,io.opentelemetry.context.ThreadLocalContextStorage,io.opentelemetry.api.trace.PropagatedSpan,io.opentelemetry.context.ContextStorageWrappers,ch.qos.logback.core.rolling.helper.Compressor\$1,io.opentelemetry.api.trace.ImmutableTraceFlags,ch.qos.logback.core.rolling.helper.RollingCalendar\$1,ch.qos.logback.classic.model.ConfigurationModel,ch.qos.logback.core.model.processor.DefaultProcessor\$1,ch.qos.logback.core.model.processor.ImplicitModelHandler\$1,ch.qos.logback.core.subst.Token,ch.qos.logback.core.pattern.parser.Parser,ch.qos.logback.core.subst.Parser\$1,ch.qos.logback.core.util.Duration,ch.qos.logback.core.model.processor.ChainedModelFilter\$1,ch.qos.logback.classic.model.processor.ConfigurationModelHandler,ch.qos.logback.classic.model.processor.LogbackClassicDefaultNestedComponentRules,ch.qos.logback.core.subst.NodeToStringTransformer\$1,ch.qos.logback.core.pattern.parser.TokenStream\$1,ch.qos.logback.core.subst.Tokenizer\$1 --initialize-at-run-time=io.netty.channel.AbstractChannel,io.netty.channel.socket.nio.SelectorProviderUtil,io.netty.util.concurrent.DefaultPromise,io.netty,org.slf4j.MDC,org.github.gestalt.config ${project.name}"
			standardOutput out
		}
	}
	println(out.toString())
}

task buildBinaryG1GC {
	dependsOn copyJarToBinaryDir
	def buildBinaryDir = "build/binary"
	def out = new ByteArrayOutputStream()
	doLast {
		exec {
			workingDir buildBinaryDir
			executable "sh"
			args "-c", "native-image -jar ${project.name}.jar --gc=G1 --no-fallback --enable-http --enable-https --enable-preview --add-modules jdk.incubator.concurrent -H:EnableURLProtocols=http,https  --initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback.core.CoreConstants,ch.qos.logback.core.util.Loader,ch.qos.logback.core.util.StatusPrinter,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.classic.Logger,ch.qos.logback.core.rolling.helper.FileNamePattern,ch.qos.logback.classic.Level,ch.qos.logback.core.status.StatusBase,io.opentelemetry.api.trace.ArrayBasedTraceStateBuilder,io.opentelemetry.context.LazyStorage,ch.qos.logback.core.util.FileSize,ch.qos.logback.core.rolling.helper.RollingCalendar,io.opentelemetry.api.internal.ImmutableSpanContext,io.opentelemetry.api.internal.OtelEncodingUtils,ch.qos.logback.classic.PatternLayout,io.opentelemetry.context.ThreadLocalContextStorage,io.opentelemetry.api.trace.PropagatedSpan,io.opentelemetry.context.ContextStorageWrappers,ch.qos.logback.core.rolling.helper.Compressor\$1,io.opentelemetry.api.trace.ImmutableTraceFlags,ch.qos.logback.core.rolling.helper.RollingCalendar\$1,ch.qos.logback.classic.model.ConfigurationModel,ch.qos.logback.core.model.processor.DefaultProcessor\$1,ch.qos.logback.core.model.processor.ImplicitModelHandler\$1,ch.qos.logback.core.subst.Token,ch.qos.logback.core.pattern.parser.Parser,ch.qos.logback.core.subst.Parser\$1,ch.qos.logback.core.util.Duration,ch.qos.logback.core.model.processor.ChainedModelFilter\$1,ch.qos.logback.classic.model.processor.ConfigurationModelHandler,ch.qos.logback.classic.model.processor.LogbackClassicDefaultNestedComponentRules,ch.qos.logback.core.subst.NodeToStringTransformer\$1,ch.qos.logback.core.pattern.parser.TokenStream\$1,ch.qos.logback.core.subst.Tokenizer\$1 --initialize-at-run-time=io.netty.channel.AbstractChannel,io.netty.channel.socket.nio.SelectorProviderUtil,io.netty.util.concurrent.DefaultPromise,io.netty,org.slf4j.MDC,org.github.gestalt.config ${project.name}"
			standardOutput out
		}
	}
	println(out.toString())
}

task buildJarForDocker {
	dependsOn jar
	def buildImageDir = "build/docker"
	def out = new ByteArrayOutputStream()
	doFirst {
		new File(buildImageDir).mkdirs()
		copy {
			from "build/libs/${project.name}-${project.version}.jar"
			into buildImageDir
			rename "${project.name}-${project.version}.jar", "${project.name}.jar"
		}
	}
	println(out.toString())
}

graalvmNative {
	metadataRepository {
		enabled = true
	}

	binaries {
		main {
			imageName = 'hildr-node'

//			javaLauncher = javaToolchains.launcherFor {
//				languageVersion = JavaLanguageVersion.of(20)
//				vendor = JvmVendorSpec.matching("GraalVM")
//			}

//			buildArgs.add('-J--enable-preview')
//			buildArgs.add('-J--add-modules=jdk.incubator.concurrent')
			buildArgs.add('--initialize-at-build-time=org.slf4j.LoggerFactory,ch.qos.logback.core.CoreConstants,ch.qos.logback.core.util.Loader,ch.qos.logback.core.util.StatusPrinter,ch.qos.logback.core.status.InfoStatus,ch.qos.logback.classic.Logger,ch.qos.logback.core.rolling.helper.FileNamePattern,ch.qos.logback.classic.Level,ch.qos.logback.core.status.StatusBase,io.opentelemetry.api.trace.ArrayBasedTraceStateBuilder,io.opentelemetry.context.LazyStorage,ch.qos.logback.core.util.FileSize,ch.qos.logback.core.rolling.helper.RollingCalendar,io.opentelemetry.api.internal.ImmutableSpanContext,io.opentelemetry.api.internal.OtelEncodingUtils,ch.qos.logback.classic.PatternLayout,io.opentelemetry.context.ThreadLocalContextStorage,io.opentelemetry.api.trace.PropagatedSpan,io.opentelemetry.context.ContextStorageWrappers,ch.qos.logback.core.rolling.helper.Compressor$1,io.opentelemetry.api.trace.ImmutableTraceFlags,ch.qos.logback.core.rolling.helper.RollingCalendar$1,ch.qos.logback.classic.model.ConfigurationModel,ch.qos.logback.core.model.processor.DefaultProcessor$1,ch.qos.logback.core.model.processor.ImplicitModelHandler$1,ch.qos.logback.core.subst.Token,ch.qos.logback.core.pattern.parser.Parser,ch.qos.logback.core.subst.Parser$1,ch.qos.logback.core.util.Duration,ch.qos.logback.core.model.processor.ChainedModelFilter$1,ch.qos.logback.classic.model.processor.ConfigurationModelHandler,ch.qos.logback.classic.model.processor.LogbackClassicDefaultNestedComponentRules,ch.qos.logback.core.subst.NodeToStringTransformer$1,ch.qos.logback.core.pattern.parser.TokenStream$1,ch.qos.logback.core.subst.Tokenizer$1')
			buildArgs.add('--initialize-at-run-time=io.netty.channel.AbstractChannel,io.netty.channel.socket.nio.SelectorProviderUtil,io.netty.util.concurrent.DefaultPromise,io.netty,org.slf4j.MDC,org.github.gestalt.config')
			buildArgs.add('--enable-http')
			buildArgs.add('--enable-https')
			buildArgs.add('--enable-preview')
			buildArgs.add('--add-modules=jdk.incubator.concurrent')
//			buildArgs.add('--gc=G1')
//			buildArgs.add('--report-unsupported-elements-at-runtime')
//			buildArgs.add('--features=okhttp3.internal.graal.OkHttpFeature')
//			buildArgs.add('-H:EnableURLProtocols=http,https')

//			buildArgs.add('-H:+AddAllCharsets')
//			buildArgs.add('-H:+StaticExecutableWithDynamicLibC')

//			useFatJar = true
		}
	}
}
