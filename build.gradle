plugins {
	id "java"
	id "com.diffplug.spotless" version "6.19.0"
	id "net.ltgt.errorprone" version "3.1.0"
}

// ignore root project
spotless.enforceCheck(false)
jar.enabled(false)

allprojects {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'jacoco'
	apply plugin: 'checkstyle'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'net.ltgt.errorprone'

	repositories {
		mavenCentral()
		maven {
			url "https://artifacts.consensys.net/public/teku/maven/"
		}
		maven {
			url "https://dl.cloudsmith.io/public/libp2p/jvm-libp2p/maven/"
		}
		maven {
			url "https://hyperledger.jfrog.io/artifactory/besu-maven/"
		}
		maven {
			url "https://artifacts.consensys.net/public/maven/maven/"
		}
	}

	java {
		toolchain {
			languageVersion = JavaLanguageVersion.of(20)
		}
		withJavadocJar()
		withSourcesJar()
	}

	javadoc {
		if (JavaVersion.current().isJava9Compatible()) {
			options.addBooleanOption('html5', true)
		}
		options.addBooleanOption('-enable-preview', true)
		options.addStringOption('-release', '20')
		options.addStringOption('-add-modules', 'jdk.incubator.concurrent')
	}

	jacoco {
		toolVersion = "0.8.9"
	}

	jacocoTestReport {
		dependsOn test

		reports {
			csv.required = true
		}
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0
				}
			}
		}
	}

	check {
		dependsOn += jacocoTestCoverageVerification
	}

	test {
		useJUnitPlatform()
		testLogging {
			events "passed", "skipped", "failed"
		}
		finalizedBy jacocoTestReport
	}

	checkstyle {
		toolVersion = '10.10.0'
		// default checkstyle config -- specific to your team agreement
		configFile = project(":").file("config/checkstyle/google_checks.xml")
	}

	spotless {
		// optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'

		format 'misc', {
			// define the files to apply `misc` to
			target '*.gradle', '*.md', '.gitignore'

			// define the steps to apply to those files
			trimTrailingWhitespace()
			indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
			endWithNewline()
		}
		java {
			// Use the default importOrder configuration
			// don't need to set target, it is inferred from java
			// apply a specific flavor of google-java-format
			googleJavaFormat('1.17.0')
			// fix formatting of type annotations
			formatAnnotations()

			licenseHeaderFile(project(":").file("config/spotless/java.license")).named('hildr').onlyIfContentMatches('/*\n' +
					' * Copyright 2023 281165273grape@gmail.com')
			licenseHeaderFile(project(":").file("config/spotless/besu.license")).named('besu').onlyIfContentMatches('/*\n' +
					' * Copyright ConsenSys AG')
			licenseHeaderFile(project(":").file("config/spotless/java-thinkAfCod.license")).named('hildr-batcher').onlyIfContentMatches('/*\n' +
					' * Copyright 2023 q315xia@163.com')

			importOrder()

			removeUnusedImports()
		}
	}

	tasks.withType(Test).configureEach {
		def outputDir = reports.junitXml.outputLocation
		jvmArgumentProviders << ({
			[
					"-Djunit.platform.reporting.open.xml.enabled=true",
					"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}",
					"--enable-preview"
			]
		} as CommandLineArgumentProvider)
	}

	tasks.withType(JavaCompile).configureEach {
		options.annotationProcessorPath = configurations.annotationProcessor
		options.compilerArgs += "--enable-preview"
		options.compilerArgs += "-Xlint:preview"
		options.compilerArgs += ["--add-modules", "jdk.incubator.concurrent"]
		options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
	}

	tasks.withType(Test).configureEach {
		jvmArgs += "--enable-preview"
		jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
	}

	tasks.withType(JavaExec).configureEach {
		jvmArgs += "--enable-preview"
		jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
	}
}
