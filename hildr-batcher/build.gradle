plugins {
	id 'java'
	id 'application'
	id "jacoco"
	id "com.diffplug.spotless" version "6.22.0"
	id "net.ltgt.errorprone" version "3.1.0"
	id 'org.graalvm.buildtools.native' version '0.9.28'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'io.optimism'
version = '0.2.5'

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
	maven {
		url "https://artifacts.consensys.net/public/teku/maven/"
	}
	maven {
		url "https://dl.cloudsmith.io/public/libp2p/jvm-libp2p/maven/"
	}
	maven {
		url "https://hyperledger.jfrog.io/artifactory/besu-maven/"
	}
	maven {
		url "https://artifacts.consensys.net/public/maven/maven/"
	}
	maven { url "https://artifacts.consensys.net/public/maven/maven/" }
	maven { url "https://jitpack.io" }
	google()
}

application {
	// Define the main class for the application.
	mainClass = 'io.optimism.HildrBatcher'
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += "--enable-preview"
	options.compilerArgs += "-Xlint:preview"
//	options.compilerArgs += ["--add-modules", "jdk.incubator.concurrent"]
	options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.withType(JavaExec).configureEach {
	jvmArgs += "--enable-preview"
//	jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

tasks.withType(Test).configureEach {
	jvmArgs += "--enable-preview"
//	jvmArgs += ["--add-modules", "jdk.incubator.concurrent"]
}

dependencies {
	implementation project(':hildr-utilities')
	implementation 'com.github.gestalt-config:gestalt-core:0.20.4'
	implementation 'com.github.gestalt-config:gestalt-toml:0.20.4'

	implementation 'com.fasterxml.jackson:jackson-bom:2.15.2'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml'
	implementation 'org.jctools:jctools-core:4.0.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//jsonrpc
	implementation('io.vertx:vertx-auth-jwt:4.4.2')
	implementation('io.vertx:vertx-core:4.4.2')
	implementation('io.vertx:vertx-web:4.4.2')

	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'
	implementation platform('io.micrometer:micrometer-tracing-bom:1.1.1')
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'

	// Logback
	implementation 'ch.qos.logback:logback-core:1.4.7'
	implementation 'ch.qos.logback:logback-classic:1.4.7'
	implementation 'org.slf4j:slf4j-api:2.0.7'

	implementation platform("io.opentelemetry:opentelemetry-bom-alpha:1.26.0-alpha")
	// OpenTelemetry core
	implementation(platform("io.opentelemetry:opentelemetry-bom:1.26.0"))
	implementation 'io.opentelemetry:opentelemetry-api'
	implementation 'io.opentelemetry:opentelemetry-sdk'
	implementation 'io.opentelemetry:opentelemetry-sdk-logs'

	// OpenTelemetry log4j appenders
	implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.26.0-alpha")
	runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0'

	implementation('io.tmio:tuweni-crypto:2.4.2'){
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		exclude group: 'org.apache.tuweni', module: 'tuweni-bytes'
		exclude group: 'org.apache.tuweni', module: 'tuweni-units'
		exclude group: 'org.apache.tuweni', module: 'tuweni-rlp'
		exclude group: 'org.apache.tuweni', module: 'tuweni-crypto'
	}
	implementation 'org.bouncycastle:bcprov-jdk18on:1.76'

	implementation 'info.picocli:picocli:4.7.3'
	annotationProcessor 'info.picocli:picocli-codegen:4.7.3'

//	implementation fileTree(dir: '../lib', include: '*.jar')
	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-engine
	testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.9.1'

	testRuntimeOnly 'org.junit.platform:junit-platform-reporting:1.9.1'

	testImplementation 'org.mockito:mockito-junit-jupiter:2.19.0'
	testImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2")

	errorprone("com.google.errorprone:error_prone_core:2.18.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.9"
}

jacocoTestReport {
	dependsOn test

	reports {
		csv.required = true
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0
			}
		}
	}
}

//checkstyle {
//	toolVersion = '10.10.0'
//	// default checkstyle config -- specific to your team agreement
//	configFile = project(":").file("config/checkstyle/google_checks.xml")
//	// Google style (idiosyncratic to Google):
//	// configFile = project(":").file("config/checkstyle/google_checks.xml")
//	// SUN style (closest to modern Java styles) -- the basis for this project:
//	// configFile = project(":").file("config/checkstyle/sun_checks.xml")
////	ignoreFailures = false
////	maxWarnings = 0
//}

spotless {
	// optional: limit format enforcement to just the files changed by this feature branch
//    ratchetFrom 'origin/main'

	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		// Use the default importOrder configuration

		// don't need to set target, it is inferred from java

		// apply a specific flavor of google-java-format
		palantirJavaFormat('2.38.0')
		// fix formatting of type annotations
		formatAnnotations()

		importOrder()

		removeUnusedImports()
	}
}

//checkstyleMain
//		.exclude('io/optimism/rpc/handler/TimeoutHandler.java')
//		.exclude('io/optimism/rpc/handler/JsonRpcExecutorHandler.java')
//		.exclude('io/optimism/rpc/handler/JsonRpcParseHandler.java')
//		.exclude('io/optimism/rpc/methods/JsonRpcMethod.java')
//		.exclude('io/optimism/rpc/methods/JsonRpcMethodsFactory.java')
//		.exclude('io/optimism/rpc/methods/JsonRpcProcessor.java')
//		.exclude('io/optimism/rpc/execution/LoggedJsonRpcProcessor.java')
//		.exclude('io/optimism/rpc/internal/JsonRpcRequest.java')
//		.exclude('io/optimism/rpc/internal/JsonRpcRequestContext.java')
//		.exclude('io/optimism/rpc/internal/JsonRpcRequestId.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcResponse.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcErrorResponse.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcError.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcResponseType.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcSuccessResponse.java')
//		.exclude('io/optimism/rpc/internal/response/JsonRpcNoResponse.java')
//		.exclude('io/optimism/rpc/execution/BaseJsonRpcProcessor.java')
//		.exclude('io/optimism/rpc/execution/JsonRpcProcessor.java')

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
}

check {
	dependsOn += jacocoTestCoverageVerification
//	dependsOn += integrationTest
}

tasks.withType(Test).configureEach {
	def outputDir = reports.junitXml.outputLocation
	jvmArgumentProviders << ({
		[
				"-Djunit.platform.reporting.open.xml.enabled=true",
				"-Djunit.platform.reporting.output.dir=${outputDir.get().asFile.absolutePath}",
				"--enable-preview",
		]
	} as CommandLineArgumentProvider)
}

java {
	withJavadocJar()
	withSourcesJar()
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
	options.addBooleanOption('-enable-preview', true)
	options.addStringOption('-release', '21')
//	options.addStringOption('-add-modules', 'jdk.incubator.concurrent')
}

jar {
	enabled = false
	manifest {
		attributes "Main-Class": "io.optimism.batcher.HildrBatcher"
		attributes "Multi-Release": "true"
	}
	dependsOn(shadowJar)
}

shadowJar {
	archiveFileName = "${project.name}-${project.version}.jar"
}

nativeCompile {
	enabled = false
}
