plugins {
	id 'application'
}

group = 'io.optimism'
version = '0.1.1'

application {
	// Define the main class for the application.
	mainClass = 'io.optimism.HildrBatcher'
}

dependencies {
	// This dependency is used by the application.
	implementation 'com.google.guava:guava:31.1-jre'
	implementation 'com.github.rholder:guava-retrying:2.0.0'

	// define any required OkHttp artifacts without version
	implementation("com.squareup.okhttp3:okhttp:5.0.0-alpha.2")
	implementation("com.squareup.okhttp3:logging-interceptor:5.0.0-alpha.2")

	implementation('org.web3j:core:4.9.8') {
		exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
		exclude group: 'com.squareup.okhttp3', module: 'okhttp'
		exclude group: 'com.squareup.okhttp3', module: 'logging-interceptor'
	}
	implementation('net.osslabz.evm:evm-abi-decoder:0.0.6')
	implementation 'com.github.gestalt-config:gestalt-core:0.20.4'
	implementation 'com.github.gestalt-config:gestalt-toml:0.20.4'

	implementation 'com.fasterxml.jackson:jackson-bom:2.15.2'
	implementation 'com.fasterxml.jackson.core:jackson-core'
	implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-toml'
	implementation 'org.jctools:jctools-core:4.0.1'

	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//jsonrpc
	implementation('io.vertx:vertx-auth-jwt:4.4.2')
	implementation('io.vertx:vertx-core:4.4.2')
	implementation('io.vertx:vertx-web:4.4.2')

	implementation 'io.micrometer:micrometer-registry-prometheus:1.11.0'
	implementation platform('io.micrometer:micrometer-tracing-bom:1.1.1')
	implementation 'io.micrometer:micrometer-tracing'
	implementation 'io.micrometer:micrometer-tracing-bridge-otel'

	// Logback
	implementation 'ch.qos.logback:logback-core:1.4.7'
	implementation 'ch.qos.logback:logback-classic:1.4.7'
	implementation 'org.slf4j:slf4j-api:2.0.7'

	implementation platform("io.opentelemetry:opentelemetry-bom-alpha:1.26.0-alpha")
	// OpenTelemetry core
	implementation(platform("io.opentelemetry:opentelemetry-bom:1.26.0"))
	implementation 'io.opentelemetry:opentelemetry-api'
	implementation 'io.opentelemetry:opentelemetry-sdk'
	implementation 'io.opentelemetry:opentelemetry-sdk-logs'

	// OpenTelemetry log4j appenders
	implementation platform("io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom-alpha:1.26.0-alpha")
	runtimeOnly 'io.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0'


	implementation 'info.picocli:picocli:4.7.3'
	annotationProcessor 'info.picocli:picocli-codegen:4.7.3'

//	implementation fileTree(dir: '../lib', include: '*.jar')
	// Use JUnit Jupiter for testing.
	testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-api
	testImplementation 'org.junit.platform:junit-platform-suite-api:1.9.1'
	// https://mvnrepository.com/artifact/org.junit.platform/junit-platform-suite-engine
	testRuntimeOnly 'org.junit.platform:junit-platform-suite-engine:1.9.1'

	testRuntimeOnly 'org.junit.platform:junit-platform-reporting:1.9.1'

	testImplementation 'org.mockito:mockito-junit-jupiter:2.19.0'
	testImplementation("com.squareup.okhttp3:mockwebserver:5.0.0-alpha.2")

	errorprone("com.google.errorprone:error_prone_core:2.18.0")
}

jar {
	manifest {
		attributes "Main-Class": "io.optimism.HildrBatcher"
	}

	duplicatesStrategy = DuplicatesStrategy.WARN
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
	}
}
